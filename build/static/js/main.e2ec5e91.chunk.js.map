{"version":3,"sources":["sidebar.js","App.js","index.js"],"names":["onDragStart","event","nodeType","shape","dataTransfer","setData","effectAllowed","className","draggable","initialElements","id","type","data","label","position","x","y","style","width","height","display","padding","borderColor","getId","App","reactFlowWrapper","useRef","useState","reactFlowInstance","setReactFlowInstance","elements","setElements","NodeText","setNodeText","NodeId","setNodeId","showTextInput","ChangeshowTextInput","handleFile","e","content","target","result","console","log","JSON","parse","fileToobj","i","newNode","es","concat","name","value","onChange","onClick","nds","map","node","accept","file","fileData","FileReader","onloadend","readAsText","handleChangeFile","files","element","document","createElement","textFile","Blob","stringify","href","URL","createObjectURL","download","body","appendChild","click","ref","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onLoad","_reactFlowInstance","onDrop","preventDefault","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","borderRadius","justifyContent","alignItems","onDragOver","dropEffect","onElementClick","rootElement","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e2ec5e91.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default () => {\r\n  const onDragStart = (event, nodeType,shape) => {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.setData(\"shape\", shape);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n  return (\r\n    <aside>\r\n     <div\r\n        className=\"dndnode\"\r\n        onDragStart={(event) => onDragStart(event, \"default\",\"rectangle\")}\r\n        draggable\r\n      >\r\n         Node\r\n      </div>\r\n\r\n      <div\r\n        className=\"dndnode circle\"\r\n        onDragStart={(event) => onDragStart(event, \"default\",\"circle\")}\r\n        draggable\r\n      >\r\n         Node\r\n      </div>\r\n   \r\n    </aside>\r\n  );\r\n};\r\n","import React, { useState, useRef } from \"react\";\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  removeElements,\n  Controls\n} from \"react-flow-renderer\";\nimport \"./styles.css\";\nimport Sidebar from \"./sidebar\";\n\nconst initialElements = [\n  {\n    id: \"node_1\",\n    type: \"input\",\n    data: { label: \"Node\" },\n    position: { x: 450, y: 100 },\n    style: {  width: '200px', height: '28px',display: 'flex',padding: '16px',borderColor:'#bababa'},\n\n  }\n];\nlet id = 2;\nconst getId = () => `node_${id++}`;\n\nexport default function App() {\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [elements, setElements] = useState(initialElements);\n  const [NodeText, setNodeText] = useState(\"\");\n  const [NodeId, setNodeId] = useState(\"\");\n  const [showTextInput, ChangeshowTextInput] = useState(false);\n  const onConnect = (params) => setElements((els) => addEdge(params, els));\n\n  const onElementClick = (event,element)=>{\n      ChangeshowTextInput(true);\n      setNodeText(element.data.label);\n      setNodeId(element.id)\n\n  }\n  const onElementsRemove = (elementsToRemove) =>\n    setElements((els) => removeElements(elementsToRemove, els));\n  const onLoad = (_reactFlowInstance) =>\n    setReactFlowInstance(_reactFlowInstance);\n  const onDragOver = (event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n  };\n  const onDrop = (event) => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData(\"application/reactflow\");\n    const shape = event.dataTransfer.getData(\"shape\");\n\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    if(shape ==='circle'){\n      const newNode = {\n        id: getId(),\n        type,\n        position,\n        data: { label: `Node` },\n        style: { borderRadius: '50%', width: '60px', height: '60px',display: 'flex',justifyContent: 'center',alignItems: 'center',borderColor:'#bababa'},\n      };\n      setElements((es) => es.concat(newNode));\n\n    }\n    else{\n      const newNode = {\n        id: getId(),\n        type,\n        position,\n        data: { label: `Node` },\n        style: {  width: '200px', height: '28px',display: 'flex',padding: '16px',borderColor:'#bababa'},\n\n      };\n      setElements((es) => es.concat(newNode));\n\n    }\n    \n  };\n  function handlerChangeText(event) {\n    setNodeText(event.target.value);\n  };\n\n  function UpdateText(){\n\n    console.log(elements);\n    setElements((nds) =>\n      nds.map((node) => {\n        if (node.id === NodeId) {\n     \n          node.data = {\n            label: NodeText,\n          };\n        }\n        return node;\n      })\n    );\n\n }\n\n const Download = () => {\n  const element = document.createElement(\"a\");\n  const textFile = new Blob([JSON.stringify(elements)], {type: 'Json'}); \n  element.href = URL.createObjectURL(textFile);\n  element.download = \"Nodes.json\";\n  document.body.appendChild(element); \n  element.click();\n }\nconst  handleFile = (e) => {\n  const content = e.target.result;\n  console.log('file content',  JSON.parse(content));\n  const fileToobj=JSON.parse(content);\n  console.log('fileToobj',fileToobj)\n  for (const i in fileToobj) {\n    console.log(`${i}: ${fileToobj[i].position.x}`);\n\n    const newNode = {\n      id: fileToobj[i].id,\n      type:fileToobj[i].type,\n      position:{x: fileToobj[i].position.x, y: fileToobj[i].position.y},\n      data: { label: fileToobj[i].data.label },\n      style: fileToobj[i].style,\n    };\n    setElements((es) => es.concat(newNode));\n\n  }\n}\n\nconst handleChangeFile = (file) => {\n  let fileData = new FileReader();\n  fileData.onloadend = handleFile;\n  fileData.readAsText(file);\n  \n}\n  return (\n    <div>\n    <div className=\"topbar\">\n    <div className=\"form\">\n    {showTextInput?\n    <div className=\"leftside\" >\n    <label className=\"label\">Node text</label>\n    <input name=\"nodetext\"  className=\"nodetext\" value={NodeText} onChange={handlerChangeText}/>\n    <button onClick={UpdateText} className=\"update\">Update</button>\n    </div> \n  :\n  <div></div>\n  }\n  \n    <div className=\"rightside\">\n    <label className=\"custom-file-upload\">\n    <input type=\"file\" className=\"upload\" accept=\".json\" onChange={e =>handleChangeFile(e.target.files[0])}/>\n     Upload\n    </label>\n\n    <button onClick={Download} className=\"download\">Download</button>\n    </div>\n  \n    </div>\n      </div>\n    <div className=\"dndflow\">\n      <ReactFlowProvider>\n        <div\n          className=\"reactflow-wrapper\"\n          style={{ height: \"650px\", width: \"500px\" }}\n          ref={reactFlowWrapper}\n        >\n          <ReactFlow\n            elements={elements}\n            onConnect={onConnect}\n            onElementsRemove={onElementsRemove}\n            onLoad={onLoad}\n            onDrop={onDrop}\n            onDragOver={onDragOver}\n            onElementClick={onElementClick}\n          >\n            <Controls />\n          </ReactFlow>\n        </div>\n        <Sidebar />\n      </ReactFlowProvider>\n    </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}